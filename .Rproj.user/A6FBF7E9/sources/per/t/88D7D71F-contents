library(darksky)
library(tidyverse)
library(readr)
library(lubridate)
library(tcltk2)
library(dplyr)
# packageVersion("darksky")

Sys.setenv(DARKSKY_API_KEY = "2f2200fed4d946888cb58dc172da817f")
data = ""
nw = list()
sframe = ""
lat = 0
lng = 0

update <- function() {
  nw <<- get_current_forecast(lng, lat)
  unixt0 = as.numeric(as.POSIXct(head(nw$daily, 1)$time))
  unixt1 = as.numeric(as.POSIXct(tail(data$daily, 1)$time))
  dif = as.integer( abs( ( ( unixt0 - unixt1 ) / 86400 ) ) )
  
  if(dif > 0 && dif < 1000){
    
    tmp <- seq(as.Date(tail(data$daily, 1)$time), (as.Date(tail(data$daily, 1)$time) + dif), "1 day") %>%
      map(~get_forecast_for(3.399259, 6.519250, .x))
    
    hourly <- tmp %>% map_df("hourly")
    daily <- tmp %>% map_df("daily")
    currently <- tmp %>% map_df("currently")
    prev <- list("hourly" = hourly, "daily" = daily, "currently" = currently)
    
    df0 = anti_join(data[["daily"]], prev[["daily"]], by = "time") %>% 
      bind_rows(prev[["daily"]]) %>% arrange(time)
    df0 = anti_join(df0, nw[["daily"]], by = "time") %>%
      bind_rows(nw[["daily"]]) %>% arrange(time)

    df1 = anti_join(data[["hourly"]], prev[["hourly"]], by = "time") %>%
      bind_rows(prev[["hourly"]]) %>% arrange(time)
    df1 = anti_join(df1, nw[["hourly"]], by = "time") %>%
      bind_rows(nw[["hourly"]]) %>% arrange(time)

    df2 = anti_join(data[["currently"]], prev[["currently"]], by = "time") %>%
      bind_rows(prev[["currently"]]) %>% arrange(time)
    df2 = anti_join(df2, nw[["currently"]], by = "time") %>%
      bind_rows(nw[["currently"]]) %>% arrange(time)

    data[["daily"]] <<- df0
    data[["hourly"]] <<- df1
    data[["currently"]] <<- df2
    
  }else{
    unx = as.POSIXct(Sys.time())
    Time <- factor(unx)
    a <- ymd_hms(as.character(Time))
    unx0 = as.POSIXct(tail(data$daily, 1)$time)
    Time0 <- factor(unx0)
    a0 <- ymd_hms(as.character(Time0))
    if(hour(a) != hour(a0)){
      data[["hourly"]] %>%
        anti_join(nw[["hourly"]], by = "time") %>%
        bind_rows(nw[["hourly"]]) %>%
        arrange(time)
      data[["daily"]] %>%
        anti_join(nw[["daily"]], by = "time") %>%
        bind_rows(nw[["daily"]]) %>%
        arrange(time)
      data[["currently"]] %>%
        anti_join(nw[["currently"]], by = "time") %>%
        bind_rows(nw[["currently"]]) %>%
        arrange(time)
    }
  }
  saveRDS(data, "data/uweather.RData")
}

getTime <- function(){
  return(Sys.Date())
}

f = function() suppressWarnings(update())

getData <- function(lng, lat){
  lat <<- lat
  lng <<- lng
  data <<- readlocaldata()
  # Every hour update of database
  tclTaskSchedule(60000, f(), id = "f", redo = TRUE)
}

tweakframe <- function(mframe){
  sframe <<- mframe;
  if(sframe == "hourly" || sframe == ""){
    return(data$hourly);
  }else if(sframe == "daily"){
    return(data$daily);
  }
  
}

getR0 <- function(){
  a = read_file("app.R")
  return(a)
}
getR1 <- function(){
  a = read_file("rscript/main.R")
  return(a)
}

readlocaldata <- function(){
  data <<- readRDS("data/uweather.RData")
  return(data)
}
