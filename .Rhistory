install.packages("leaflet")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
function gettime(){
return Sys.Date();
}
function getz(){
return()
}
runApp()
runApp()
Sys.setenv(DARKSKY_API_KEY = "2f2200fed4d946888cb58dc172da817f")
runApp()
install.packages("dplyr")
runApp()
install.packages("tidyverse")
runApp()
install.packages("tidyselect")
install.packages(c("anytime", "broom", "cairoDevice", "callr", "caTools", "commonmark", "data.table", "DBI", "dbplyr", "e1071", "evaluate", "FactoMineR", "FNN", "forecast", "foreign", "Formula", "FSA", "gam", "GeneralizedHyperbolic", "git2r", "glmnet", "glue", "gmp", "gtools", "haven", "hermite", "highr", "htmlTable", "htmlwidgets", "httpuv", "igraph", "iterators", "kernlab", "ks", "kSamples", "lmtest", "lubridate", "maptools", "MASS", "matrixStats", "mclust", "mgcv", "mixOmics", "modelr", "modeltools", "mvtnorm", "NeuralNetTools", "openssl", "openxlsx", "padr", "plotly", "plotrix", "PMCMR", "PMCMRplus", "polspline", "psych", "purrr", "quantmod", "quantreg", "rcompanion", "Rcpp", "RcppArmadillo", "reprex", "rgl", "rJava", "rmarkdown", "Rmpfr", "roxygen2", "RSpectra", "RUnit", "RVAideMemoire", "selectr", "shiny", "stringi", "survival", "TH.data", "tidyquant", "tidyr", "timetk", "tseries", "UsingR", "vegan", "viridis", "WRS2", "xlsx", "XML", "xts", "yaml", "zoo"))
install.packages(c("anytime", "broom", "cairoDevice", "callr", "caTools", "commonmark", "data.table", "DBI", "dbplyr", "e1071", "evaluate", "FactoMineR", "FNN", "forecast", "foreign", "Formula", "FSA", "gam", "GeneralizedHyperbolic", "git2r", "glmnet", "glue", "gmp", "gtools", "haven", "hermite", "highr", "htmlTable", "htmlwidgets", "httpuv", "igraph", "iterators", "kernlab", "ks", "kSamples", "lmtest", "lubridate", "maptools", "MASS", "matrixStats", "mclust", "mgcv", "mixOmics", "modelr", "modeltools", "mvtnorm", "NeuralNetTools", "openssl", "openxlsx", "padr", "plotly", "plotrix", "PMCMR", "PMCMRplus", "polspline", "psych", "purrr", "quantmod", "quantreg", "rcompanion", "Rcpp", "RcppArmadillo", "reprex", "rgl", "rJava", "rmarkdown", "Rmpfr", "roxygen2", "RSpectra", "RUnit", "RVAideMemoire", "selectr", "shiny", "stringi", "survival", "TH.data", "tidyquant", "tidyr", "timetk", "tseries", "UsingR", "vegan", "viridis", "WRS2", "xlsx", "XML", "xts", "yaml", "zoo"))
shiny::runApp()
install.packages("tidyselect")
runApp()
install.packages("purrr")
runApp()
install.packages("tidyr")
runApp()
install.packages("backports")
runApp()
install.packages("haven")
runApp()
install.packages("lubridate")
runApp()
install.packages("readr")
shiny::runApp()
install.packages("readxl")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabsetPanel
??tabsetPanel
shiny::runApp()
runApp()
?fillCol
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sframe = "hourly";
data <- get_current_forecast(lng, lat);
runApp()
runApp()
runApp()
runApp()
if(sframe == "hourly" || sframe == ""){
return(data$hourly);
}else if(sframe == "daily"){
return(data$daily);
}
tweakframe <- function(mframe){
sframe = mframe;
if(sframe == "hourly" || sframe == ""){
return(data$hourly);
}else if(sframe == "daily"){
return(data$daily);
}
}
runApp()
runApp()
return(data["daily"]);
runApp()
View(data)
data <<- get_current_forecast(lng, lat);
getData <- function(lng, lat){
data <<- get_current_forecast(lng, lat);
}
runApp()
view(data)
View(data)
data$hourly
runApp()
View(data$daily)
View(data$currently)
runApp()
runApp()
runApp()
yaxs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
seq(1,length(colnames(dat)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp();
deployApp();
deployApp()
library(shiny)
library(shinyjs)
library(leaflet)
library(DT)
deployApp()
shiny::runApp()
runApp()
deployApp()
?shiny
library(rsconnect)
deployApp()
v = read.file("test.R")
read.delim(file.choose())
a = read.delim("test.R")
cat(a)
print(a)
library(readr)
a = read_file("test.R")
print(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
a = getData(3.399259, 6.519250)
data
View(data$currently)
View(data$hourly)
View(data$daily)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
